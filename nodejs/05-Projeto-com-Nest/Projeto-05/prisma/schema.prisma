// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT) // criando permissões.

  questions Question[] //relacionamento inverso 
  answers   Answer[] //relacionamento inverso
  comments  Comment[] //relacionamento inverso

  //renomeando o nome da tabela para lowcase
  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String
  createdAt    DateTime  @default(now()) @map("created_at") //renomeando coluna da tabela.
  updatedAt    DateTime? @updatedAt @map("updated_at") //fazendo o prisma preencher automáticamente
  authorId     String    @map("author_id")
  bestAnswerId String?   @unique @map("best_answer_id")

  // toda question pertence a um usuário.
  // fazendo o relacionamento
  author     User    @relation(fields: [authorId], references: [id])
  bestAnswer Answer? @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  // quando tem duas tabela de relacionamento iguais prisma fica perdido,
  // para resolver isso acrescentamos uma string onde está sendo relacionado.

  // varias respostas
  answers     Answer[]
  comments    Comment[]
  attachments Attachment[]

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at") //renomeando coluna da tabela.
  updatedAt  DateTime? @updatedAt @map("updated_at") //fazendo o prisma preencher automáticamente
  authorId   String    @map("author_id")
  questionId String    @map("question_id")

  // toda question pertence a um usuário.
  // fazendo o relacionamento
  author       User         @relation(fields: [authorId], references: [id])
  bestAnswerOn Question?    @relation("bestAnswer")
  question     Question     @relation(fields: [questionId], references: [id])
  comments     Comment[]
  attachments  Attachment[]

  @@map("answers")
}

model Comment {
  id         String    @id @default(uuid())
  content    String
  createdAt  DateTime  @default(now()) @map("created_at") //renomeando coluna da tabela.
  updatedAt  DateTime? @updatedAt @map("updated_at") //fazendo o prisma preencher automáticamente
  authorId   String    @map("author_id")
  questionId String?   @map("question_id")
  answerId   String?   @map("answer_id")

  // fazendo o relacionamento
  author User @relation(fields: [authorId], references: [id])

  // criando relacionamento opcionais
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Attachment {
  id         String  @id @default(uuid())
  title      String
  url        String
  questionId String? @map("question_id")
  answerId   String? @map("answer_id")

  // criando relacionamento opcionais
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}
